Index: app/google-services.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/google-services.json b/app/google-services.json
deleted file mode 100644
--- a/app/google-services.json	
+++ /dev/null	
@@ -1,29 +0,0 @@
-{
-  "project_info": {
-    "project_number": "795156926967",
-    "project_id": "project-management-a4",
-    "storage_bucket": "project-management-a4.appspot.com"
-  },
-  "client": [
-    {
-      "client_info": {
-        "mobilesdk_app_id": "1:795156926967:android:6c3ded1fe76d31bb9e9ef2",
-        "android_client_info": {
-          "package_name": "com.example.projectmanagement"
-        }
-      },
-      "oauth_client": [],
-      "api_key": [
-        {
-          "current_key": "AIzaSyDM28ujIYLZwmRKXfjX-ys9mpssb2jaceA"
-        }
-      ],
-      "services": {
-        "appinvite_service": {
-          "other_platform_oauth_client": []
-        }
-      }
-    }
-  ],
-  "configuration_version": "1"
-}
\ No newline at end of file
Index: app/src/main/java/com/example/projectmanagement/activtities/BaseActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.projectmanagement.activtities\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.app.Dialog\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.content.ContextCompat\r\nimport com.example.projectmanagement.R\r\nimport com.example.projectmanagement.databinding.ActivityBaseBinding\r\nimport com.example.projectmanagement.databinding.DailogCustomBinding\r\nimport com.google.android.material.snackbar.Snackbar\r\nimport com.google.firebase.auth.FirebaseAuth\r\n\r\n@Suppress(\"DEPRECATION\")\r\nopen class BaseActivity : AppCompatActivity() {\r\n    private var doubleBackToExitPressedOnce = false\r\n\r\n    private lateinit var mProgressDialog: Dialog\r\n\r\n    private var binding : ActivityBaseBinding? = null\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        binding = ActivityBaseBinding.inflate(layoutInflater)\r\n        setContentView(binding?.root)\r\n    }\r\n    fun showProgressDialog(text:String){\r\n        mProgressDialog = Dialog(this)\r\n\r\n        val dialogBinding = DailogCustomBinding.inflate(layoutInflater)\r\n        mProgressDialog.setContentView(dialogBinding.root)\r\n        dialogBinding.tvBase.text = text\r\n\r\n        mProgressDialog.show()\r\n    }\r\n    fun hideProgressDialog(){\r\n        mProgressDialog.dismiss()\r\n    }\r\n\r\n    fun getCurrentUserId():String{\r\n        return FirebaseAuth.getInstance().currentUser!!.uid\r\n    }\r\n\r\n    fun doubleBackToExit(){\r\n        if (doubleBackToExitPressedOnce){\r\n            super.onBackPressed()\r\n            return\r\n        }\r\n\r\n        this.doubleBackToExitPressedOnce = true\r\n        Toast.makeText(this, \"Please press once Again to Exit\",\r\n            Toast.LENGTH_SHORT).show()\r\n\r\n        Handler().postDelayed({doubleBackToExitPressedOnce = false}, 2000)\r\n    }\r\n\r\n    @SuppressLint(\"ShowToast\", \"ResourceType\")\r\n    fun showErrorSnackBar(message:String){\r\n        val snackBar = Snackbar.make(findViewById(android.R.id.content)\r\n            ,message,Snackbar.LENGTH_LONG)\r\n        val snackBarView = snackBar.view\r\n        snackBarView.setBackgroundColor(ContextCompat.getColor\r\n            (this@BaseActivity, R.color.snackbar_error_color))\r\n        snackBar.show()\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/projectmanagement/activtities/BaseActivity.kt b/app/src/main/java/com/example/projectmanagement/activtities/BaseActivity.kt
--- a/app/src/main/java/com/example/projectmanagement/activtities/BaseActivity.kt	
+++ b/app/src/main/java/com/example/projectmanagement/activtities/BaseActivity.kt	
@@ -55,7 +55,6 @@
 
         Handler().postDelayed({doubleBackToExitPressedOnce = false}, 2000)
     }
-
     @SuppressLint("ShowToast", "ResourceType")
     fun showErrorSnackBar(message:String){
         val snackBar = Snackbar.make(findViewById(android.R.id.content)
Index: app/src/main/java/com/example/projectmanagement/activtities/SignInActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.projectmanagement.activtities\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.text.TextUtils\r\nimport android.view.WindowManager.LayoutParams.FLAG_FULLSCREEN\r\nimport android.widget.Toast\r\nimport com.example.projectmanagement.R\r\nimport com.example.projectmanagement.databinding.ActivitySignInBinding\r\nimport com.google.firebase.auth.FirebaseAuth\r\n\r\n@Suppress(\"DEPRECATION\")\r\nclass SignInActivity : BaseActivity() {\r\n    private lateinit var auth: FirebaseAuth\r\n    private var binding : ActivitySignInBinding? = null\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        binding = ActivitySignInBinding.inflate(layoutInflater)\r\n        setContentView(binding?.root)\r\n        setupActionBar()\r\n\r\n        binding?.signInActivityBtn?.setOnClickListener{\r\n            signInRegisteredUser()\r\n        }\r\n\r\n        auth  = FirebaseAuth.getInstance()\r\n\r\n        window.setFlags(\r\n            FLAG_FULLSCREEN,\r\n            FLAG_FULLSCREEN\r\n        )\r\n    }\r\n    private fun setupActionBar(){\r\n        setSupportActionBar(binding?.toolbarSignIn)\r\n        val actionBar = supportActionBar\r\n        if (actionBar!= null) {\r\n            actionBar.setDisplayHomeAsUpEnabled(true)\r\n            actionBar.setHomeAsUpIndicator(R.drawable.ic_back_24dp)\r\n        }\r\n        binding?.toolbarSignIn?.setNavigationOnClickListener{onBackPressed()}\r\n    }\r\n\r\n    private fun signInRegisteredUser(){\r\n        val email:String = binding?.tvEmailSignIn?.text.toString().trim{ it <= ' ' }\r\n        val password:String = binding?.tvPasswordSignIn?.text.toString().trim{ it <= ' ' }\r\n\r\n        if (validateForm(email,password)){\r\n            showProgressDialog(resources.getString(R.string.please_wait))\r\n\r\n            auth.signInWithEmailAndPassword(email, password)\r\n                .addOnCompleteListener(this) { task ->\r\n                    hideProgressDialog()\r\n                    if (task.isSuccessful) {\r\n                        Toast.makeText(this@SignInActivity, \"You have successfully signed In\", Toast.LENGTH_SHORT).show()\r\n                        startActivity(Intent(this@SignInActivity,MainActivity::class.java))\r\n                    } else {\r\n                        Toast.makeText(\r\n                            baseContext,\r\n                            \"Authentication failed.\",\r\n                            Toast.LENGTH_LONG,\r\n                        ).show()\r\n\r\n                    }\r\n                }\r\n        }\r\n    }\r\n\r\n    private fun validateForm(email:String,password:String):Boolean{\r\n        return if (TextUtils.isEmpty(email)){\r\n                showErrorSnackBar(\"Please enter your Email.\")\r\n                false\r\n        }\r\n        else if ( TextUtils.isEmpty(password))\r\n        {\r\n            showErrorSnackBar(\"Please enter Password.\")\r\n            false\r\n        }\r\n        else {\r\n            true\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/projectmanagement/activtities/SignInActivity.kt b/app/src/main/java/com/example/projectmanagement/activtities/SignInActivity.kt
--- a/app/src/main/java/com/example/projectmanagement/activtities/SignInActivity.kt	
+++ b/app/src/main/java/com/example/projectmanagement/activtities/SignInActivity.kt	
@@ -49,7 +49,6 @@
 
             auth.signInWithEmailAndPassword(email, password)
                 .addOnCompleteListener(this) { task ->
-                    hideProgressDialog()
                     if (task.isSuccessful) {
                         Toast.makeText(this@SignInActivity, "You have successfully signed In", Toast.LENGTH_SHORT).show()
                         startActivity(Intent(this@SignInActivity,MainActivity::class.java))
Index: app/src/main/java/com/example/projectmanagement/activtities/SignUpActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.projectmanagement.activtities\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.os.Bundle\r\nimport android.text.TextUtils\r\nimport android.view.WindowManager\r\nimport android.widget.Toast\r\nimport com.example.projectmanagement.R\r\nimport com.example.projectmanagement.databinding.ActivitySignUpBinding\r\nimport com.example.projectmanagement.firebase.FirestoreClass\r\nimport com.example.projectmanagement.models.User\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.auth.FirebaseUser\r\n\r\n@Suppress(\"DEPRECATION\")\r\nclass SignUpActivity : BaseActivity() {\r\n\r\nprivate var binding : ActivitySignUpBinding? = null\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        binding = ActivitySignUpBinding.inflate(layoutInflater)\r\n        setContentView(binding?.root)\r\n        setupActionBar()\r\n\r\n        window.setFlags(\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN,\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN\r\n        )\r\n\r\n    }\r\n    @SuppressLint(\"SuspiciousIndentation\")\r\n    private fun setupActionBar(){\r\n        setSupportActionBar(binding?.toolbarSignup)\r\n        val actionBar = supportActionBar\r\n        if (actionBar!= null) {\r\n            actionBar.setDisplayHomeAsUpEnabled(true)\r\n            actionBar.setHomeAsUpIndicator(R.drawable.ic_back_24dp)\r\n        }\r\n            binding?.toolbarSignup?.setNavigationOnClickListener{onBackPressed()}\r\n            binding?.btnSignupActivity?.setOnClickListener {\r\n                registerUser()\r\n            }\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        binding = null\r\n    }\r\n\r\n    private fun registerUser() {\r\n        // Here we get the text from editText and trim the space\r\n        val name=binding?.tvName?.text.toString().trim { it <= ' ' }\r\n        val email=binding?.tvEmail?.text.toString().trim { it <= ' ' }\r\n        val password=binding?.tvPassword?.text.toString().trim { it <= ' ' }\r\n\r\n        if (validateForm(name, email, password)) {\r\n            showProgressDialog(resources.getString(R.string.please_wait))\r\n            FirebaseAuth.getInstance().createUserWithEmailAndPassword(email, password)\r\n                .addOnCompleteListener { task ->\r\n                    if (task.isSuccessful) {\r\n                        val firebaseUser: FirebaseUser = task.result!!.user!!\r\n                        val registeredEmail = firebaseUser.email!!\r\n                        val user = User(\r\n                            firebaseUser.uid, name, registeredEmail\r\n                        )\r\n                        FirestoreClass().registerUser(this@SignUpActivity, user)\r\n                    } else {\r\n                        Toast.makeText(\r\n                            this@SignUpActivity,\r\n                            task.exception!!.message,\r\n                            Toast.LENGTH_SHORT\r\n                        ).show()\r\n                    }\r\n                }\r\n        }\r\n    }\r\n\r\n    private fun validateForm(name:String,email:String,password:String):Boolean{\r\n        return when{\r\n            TextUtils.isEmpty(name)->{\r\n                showErrorSnackBar(\"Please enter your Name.\")\r\n                false\r\n            }\r\n            TextUtils.isEmpty(email)->{\r\n                showErrorSnackBar(\"Please enter your Email.\")\r\n                false\r\n            }\r\n            TextUtils.isEmpty(password)->{\r\n                showErrorSnackBar(\"Please enter Password.\")\r\n                false\r\n            }\r\n            else -> {\r\n                true\r\n            }\r\n        }\r\n    }\r\n    fun userRegisteredSuccess(){\r\n        Toast.makeText(\r\n            this,\r\n                    \" you have successfully registered \",\r\n            Toast.LENGTH_LONG\r\n        ).show()\r\n        hideProgressDialog()\r\n        FirebaseAuth.getInstance().signOut()\r\n        finish()\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/projectmanagement/activtities/SignUpActivity.kt b/app/src/main/java/com/example/projectmanagement/activtities/SignUpActivity.kt
--- a/app/src/main/java/com/example/projectmanagement/activtities/SignUpActivity.kt	
+++ b/app/src/main/java/com/example/projectmanagement/activtities/SignUpActivity.kt	
@@ -46,30 +46,23 @@
         super.onDestroy()
         binding = null
     }
-
-    private fun registerUser() {
-        // Here we get the text from editText and trim the space
-        val name=binding?.tvName?.text.toString().trim { it <= ' ' }
-        val email=binding?.tvEmail?.text.toString().trim { it <= ' ' }
-        val password=binding?.tvPassword?.text.toString().trim { it <= ' ' }
-
-        if (validateForm(name, email, password)) {
+        fun registerUser(){
+        val name:String=binding?.tvName?.text.toString().trim{it<=' '}
+        val email:String=binding?.tvEmail?.text.toString().trim{it<=' '}
+        val password:String=binding?.tvPassword?.text.toString().trim{it<=' '}
+        if (validateForm(name,email,password)){
             showProgressDialog(resources.getString(R.string.please_wait))
-            FirebaseAuth.getInstance().createUserWithEmailAndPassword(email, password)
-                .addOnCompleteListener { task ->
+            FirebaseAuth.getInstance()
+                .createUserWithEmailAndPassword(email,password).addOnCompleteListener { task ->
                     if (task.isSuccessful) {
                         val firebaseUser: FirebaseUser = task.result!!.user!!
                         val registeredEmail = firebaseUser.email!!
-                        val user = User(
-                            firebaseUser.uid, name, registeredEmail
-                        )
-                        FirestoreClass().registerUser(this@SignUpActivity, user)
+                        val user= User(firebaseUser.uid,name,registeredEmail)
+                        FirestoreClass().registerUser(this,user)
+                        finish()
                     } else {
-                        Toast.makeText(
-                            this@SignUpActivity,
-                            task.exception!!.message,
-                            Toast.LENGTH_SHORT
-                        ).show()
+                        Toast.makeText(this, "Registration Failed", Toast.LENGTH_SHORT)
+                            .show()
                     }
                 }
         }
@@ -95,12 +88,8 @@
         }
     }
     fun userRegisteredSuccess(){
-        Toast.makeText(
-            this,
-                    " you have successfully registered ",
-            Toast.LENGTH_LONG
-        ).show()
-        hideProgressDialog()
+        Toast.makeText(this, "You have Successfully Registered",
+        Toast.LENGTH_SHORT).show()
         FirebaseAuth.getInstance().signOut()
         finish()
     }
